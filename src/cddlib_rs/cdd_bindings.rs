/* automatically generated by rust-bindgen 0.72.0 */

#![allow(warnings)]

pub const dd_ARITHMETIC: &[u8; 9] = b"C double\0";
pub const dd_COPYRIGHT: &[u8; 48] = b"Copyright (C) Komei Fukuda, fukuda@math.ethz.ch\0";
pub const dd_DDVERSION: &[u8; 14] = b"Version 0.94m\0";
pub const dd_wordlenmax: u32 = 1024;
pub const dd_linelenmax: u32 = 4096;
pub const dd_datawidth: u32 = 10;
pub const dd_filenamelen: u32 = 255;
pub const dd_FALSE: u32 = 0;
pub const dd_TRUE: u32 = 1;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_off_t = __int64_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
pub type set_type = *mut ::std::os::raw::c_ulong;
pub type mytype = [f64; 1usize];
unsafe extern "C" {
    pub fn dd_set_global_constants();
}
unsafe extern "C" {
    pub fn dd_free_global_constants();
}
pub type time_t = __darwin_time_t;
pub type dd_boolean = ::std::os::raw::c_int;
pub type dd_rowrange = ::std::os::raw::c_long;
pub type dd_colrange = ::std::os::raw::c_long;
pub type dd_bigrange = ::std::os::raw::c_long;
pub type dd_rowset = set_type;
pub type dd_colset = set_type;
pub type dd_rowindex = *mut ::std::os::raw::c_long;
pub type dd_rowflag = *mut ::std::os::raw::c_int;
pub type dd_colindex = *mut ::std::os::raw::c_long;
pub type dd_Amatrix = *mut *mut mytype;
pub type dd_Arow = *mut mytype;
pub type dd_SetVector = *mut set_type;
pub type dd_Bmatrix = *mut *mut mytype;
pub type dd_Aincidence = *mut set_type;
pub type dd_DataFileType = [::std::os::raw::c_char; 255usize];
pub type dd_LineType = [::std::os::raw::c_char; 4096usize];
pub type dd_WordType = [::std::os::raw::c_char; 1024usize];
pub type dd_RayPtr = *mut dd_raydata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_raydata {
    pub Ray: *mut mytype,
    pub ZeroSet: dd_rowset,
    pub FirstInfeasIndex: dd_rowrange,
    pub feasible: dd_boolean,
    pub ARay: mytype,
    pub Next: dd_RayPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_raydata"][::std::mem::size_of::<dd_raydata>() - 48usize];
    ["Alignment of dd_raydata"][::std::mem::align_of::<dd_raydata>() - 8usize];
    ["Offset of field: dd_raydata::Ray"][::std::mem::offset_of!(dd_raydata, Ray) - 0usize];
    ["Offset of field: dd_raydata::ZeroSet"][::std::mem::offset_of!(dd_raydata, ZeroSet) - 8usize];
    ["Offset of field: dd_raydata::FirstInfeasIndex"]
        [::std::mem::offset_of!(dd_raydata, FirstInfeasIndex) - 16usize];
    ["Offset of field: dd_raydata::feasible"]
        [::std::mem::offset_of!(dd_raydata, feasible) - 24usize];
    ["Offset of field: dd_raydata::ARay"][::std::mem::offset_of!(dd_raydata, ARay) - 32usize];
    ["Offset of field: dd_raydata::Next"][::std::mem::offset_of!(dd_raydata, Next) - 40usize];
};
pub type dd_RayType = dd_raydata;
pub type dd_AdjacencyPtr = *mut dd_adjacencydata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_adjacencydata {
    pub Ray1: dd_RayPtr,
    pub Ray2: dd_RayPtr,
    pub Next: dd_AdjacencyPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_adjacencydata"][::std::mem::size_of::<dd_adjacencydata>() - 24usize];
    ["Alignment of dd_adjacencydata"][::std::mem::align_of::<dd_adjacencydata>() - 8usize];
    ["Offset of field: dd_adjacencydata::Ray1"]
        [::std::mem::offset_of!(dd_adjacencydata, Ray1) - 0usize];
    ["Offset of field: dd_adjacencydata::Ray2"]
        [::std::mem::offset_of!(dd_adjacencydata, Ray2) - 8usize];
    ["Offset of field: dd_adjacencydata::Next"]
        [::std::mem::offset_of!(dd_adjacencydata, Next) - 16usize];
};
pub type dd_AdjacencyType = dd_adjacencydata;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_AdjacencyTestType {
    dd_Combinatorial = 0,
    dd_Algebraic = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_RowOrderType {
    dd_MaxIndex = 0,
    dd_MinIndex = 1,
    dd_MinCutoff = 2,
    dd_MaxCutoff = 3,
    dd_MixCutoff = 4,
    dd_LexMin = 5,
    dd_LexMax = 6,
    dd_RandomRow = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_NumberType {
    dd_Unknown = 0,
    dd_Real = 1,
    dd_Rational = 2,
    dd_Integer = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_RepresentationType {
    dd_Unspecified = 0,
    dd_Inequality = 1,
    dd_Generator = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_ConversionType {
    dd_IneToGen = 0,
    dd_GenToIne = 1,
    dd_LPMax = 2,
    dd_LPMin = 3,
    dd_InteriorFind = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_IncidenceOutputType {
    dd_IncOff = 0,
    dd_IncCardinality = 1,
    dd_IncSet = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_AdjacencyOutputType {
    dd_AdjOff = 0,
    dd_AdjacencyList = 1,
    dd_AdjacencyDegree = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_FileInputModeType {
    dd_Auto = 0,
    dd_SemiAuto = 1,
    dd_Manual = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_ErrorType {
    dd_DimensionTooLarge = 0,
    dd_ImproperInputFormat = 1,
    dd_NegativeMatrixSize = 2,
    dd_EmptyVrepresentation = 3,
    dd_EmptyHrepresentation = 4,
    dd_EmptyRepresentation = 5,
    dd_IFileNotFound = 6,
    dd_OFileNotOpen = 7,
    dd_NoLPObjective = 8,
    dd_NoRealNumberSupport = 9,
    dd_NotAvailForH = 10,
    dd_NotAvailForV = 11,
    dd_CannotHandleLinearity = 12,
    dd_RowIndexOutOfRange = 13,
    dd_ColIndexOutOfRange = 14,
    dd_LPCycling = 15,
    dd_NumericallyInconsistent = 16,
    dd_NoError = 17,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_CompStatusType {
    dd_InProgress = 0,
    dd_AllFound = 1,
    dd_RegionEmpty = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_LPObjectiveType {
    dd_LPnone = 0,
    dd_LPmax = 1,
    dd_LPmin = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_LPSolverType {
    dd_CrissCross = 0,
    dd_DualSimplex = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dd_LPStatusType {
    dd_LPSundecided = 0,
    dd_Optimal = 1,
    dd_Inconsistent = 2,
    dd_DualInconsistent = 3,
    dd_StrucInconsistent = 4,
    dd_StrucDualInconsistent = 5,
    dd_Unbounded = 6,
    dd_DualUnbounded = 7,
}
pub type dd_LPSolutionPtr = *mut dd_lpsolution;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_lpsolution {
    pub filename: dd_DataFileType,
    pub objective: dd_LPObjectiveType,
    pub solver: dd_LPSolverType,
    pub m: dd_rowrange,
    pub d: dd_colrange,
    pub numbtype: dd_NumberType,
    pub LPS: dd_LPStatusType,
    pub optvalue: mytype,
    pub sol: dd_Arow,
    pub dsol: dd_Arow,
    pub nbindex: dd_colindex,
    pub re: dd_rowrange,
    pub se: dd_colrange,
    pub pivots: [::std::os::raw::c_long; 5usize],
    pub total_pivots: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_lpsolution"][::std::mem::size_of::<dd_lpsolution>() - 384usize];
    ["Alignment of dd_lpsolution"][::std::mem::align_of::<dd_lpsolution>() - 8usize];
    ["Offset of field: dd_lpsolution::filename"]
        [::std::mem::offset_of!(dd_lpsolution, filename) - 0usize];
    ["Offset of field: dd_lpsolution::objective"]
        [::std::mem::offset_of!(dd_lpsolution, objective) - 256usize];
    ["Offset of field: dd_lpsolution::solver"]
        [::std::mem::offset_of!(dd_lpsolution, solver) - 260usize];
    ["Offset of field: dd_lpsolution::m"][::std::mem::offset_of!(dd_lpsolution, m) - 264usize];
    ["Offset of field: dd_lpsolution::d"][::std::mem::offset_of!(dd_lpsolution, d) - 272usize];
    ["Offset of field: dd_lpsolution::numbtype"]
        [::std::mem::offset_of!(dd_lpsolution, numbtype) - 280usize];
    ["Offset of field: dd_lpsolution::LPS"][::std::mem::offset_of!(dd_lpsolution, LPS) - 284usize];
    ["Offset of field: dd_lpsolution::optvalue"]
        [::std::mem::offset_of!(dd_lpsolution, optvalue) - 288usize];
    ["Offset of field: dd_lpsolution::sol"][::std::mem::offset_of!(dd_lpsolution, sol) - 296usize];
    ["Offset of field: dd_lpsolution::dsol"]
        [::std::mem::offset_of!(dd_lpsolution, dsol) - 304usize];
    ["Offset of field: dd_lpsolution::nbindex"]
        [::std::mem::offset_of!(dd_lpsolution, nbindex) - 312usize];
    ["Offset of field: dd_lpsolution::re"][::std::mem::offset_of!(dd_lpsolution, re) - 320usize];
    ["Offset of field: dd_lpsolution::se"][::std::mem::offset_of!(dd_lpsolution, se) - 328usize];
    ["Offset of field: dd_lpsolution::pivots"]
        [::std::mem::offset_of!(dd_lpsolution, pivots) - 336usize];
    ["Offset of field: dd_lpsolution::total_pivots"]
        [::std::mem::offset_of!(dd_lpsolution, total_pivots) - 376usize];
};
pub type dd_LPSolutionType = dd_lpsolution;
pub type dd_LPPtr = *mut dd_lpdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_lpdata {
    pub filename: dd_DataFileType,
    pub objective: dd_LPObjectiveType,
    pub solver: dd_LPSolverType,
    pub Homogeneous: dd_boolean,
    pub m: dd_rowrange,
    pub d: dd_colrange,
    pub A: dd_Amatrix,
    pub B: dd_Bmatrix,
    pub objrow: dd_rowrange,
    pub rhscol: dd_colrange,
    pub numbtype: dd_NumberType,
    pub eqnumber: dd_rowrange,
    pub equalityset: dd_rowset,
    pub redcheck_extensive: dd_boolean,
    pub ired: dd_rowrange,
    pub redset_extra: dd_rowset,
    pub redset_accum: dd_rowset,
    pub posset_extra: dd_rowset,
    pub lexicopivot: dd_boolean,
    pub LPS: dd_LPStatusType,
    pub m_alloc: dd_rowrange,
    pub d_alloc: dd_colrange,
    pub optvalue: mytype,
    pub sol: dd_Arow,
    pub dsol: dd_Arow,
    pub nbindex: dd_colindex,
    pub re: dd_rowrange,
    pub se: dd_colrange,
    pub pivots: [::std::os::raw::c_long; 5usize],
    pub total_pivots: ::std::os::raw::c_long,
    pub use_given_basis: ::std::os::raw::c_int,
    pub given_nbindex: dd_colindex,
    pub starttime: time_t,
    pub endtime: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_lpdata"][::std::mem::size_of::<dd_lpdata>() - 536usize];
    ["Alignment of dd_lpdata"][::std::mem::align_of::<dd_lpdata>() - 8usize];
    ["Offset of field: dd_lpdata::filename"][::std::mem::offset_of!(dd_lpdata, filename) - 0usize];
    ["Offset of field: dd_lpdata::objective"]
        [::std::mem::offset_of!(dd_lpdata, objective) - 256usize];
    ["Offset of field: dd_lpdata::solver"][::std::mem::offset_of!(dd_lpdata, solver) - 260usize];
    ["Offset of field: dd_lpdata::Homogeneous"]
        [::std::mem::offset_of!(dd_lpdata, Homogeneous) - 264usize];
    ["Offset of field: dd_lpdata::m"][::std::mem::offset_of!(dd_lpdata, m) - 272usize];
    ["Offset of field: dd_lpdata::d"][::std::mem::offset_of!(dd_lpdata, d) - 280usize];
    ["Offset of field: dd_lpdata::A"][::std::mem::offset_of!(dd_lpdata, A) - 288usize];
    ["Offset of field: dd_lpdata::B"][::std::mem::offset_of!(dd_lpdata, B) - 296usize];
    ["Offset of field: dd_lpdata::objrow"][::std::mem::offset_of!(dd_lpdata, objrow) - 304usize];
    ["Offset of field: dd_lpdata::rhscol"][::std::mem::offset_of!(dd_lpdata, rhscol) - 312usize];
    ["Offset of field: dd_lpdata::numbtype"]
        [::std::mem::offset_of!(dd_lpdata, numbtype) - 320usize];
    ["Offset of field: dd_lpdata::eqnumber"]
        [::std::mem::offset_of!(dd_lpdata, eqnumber) - 328usize];
    ["Offset of field: dd_lpdata::equalityset"]
        [::std::mem::offset_of!(dd_lpdata, equalityset) - 336usize];
    ["Offset of field: dd_lpdata::redcheck_extensive"]
        [::std::mem::offset_of!(dd_lpdata, redcheck_extensive) - 344usize];
    ["Offset of field: dd_lpdata::ired"][::std::mem::offset_of!(dd_lpdata, ired) - 352usize];
    ["Offset of field: dd_lpdata::redset_extra"]
        [::std::mem::offset_of!(dd_lpdata, redset_extra) - 360usize];
    ["Offset of field: dd_lpdata::redset_accum"]
        [::std::mem::offset_of!(dd_lpdata, redset_accum) - 368usize];
    ["Offset of field: dd_lpdata::posset_extra"]
        [::std::mem::offset_of!(dd_lpdata, posset_extra) - 376usize];
    ["Offset of field: dd_lpdata::lexicopivot"]
        [::std::mem::offset_of!(dd_lpdata, lexicopivot) - 384usize];
    ["Offset of field: dd_lpdata::LPS"][::std::mem::offset_of!(dd_lpdata, LPS) - 388usize];
    ["Offset of field: dd_lpdata::m_alloc"][::std::mem::offset_of!(dd_lpdata, m_alloc) - 392usize];
    ["Offset of field: dd_lpdata::d_alloc"][::std::mem::offset_of!(dd_lpdata, d_alloc) - 400usize];
    ["Offset of field: dd_lpdata::optvalue"]
        [::std::mem::offset_of!(dd_lpdata, optvalue) - 408usize];
    ["Offset of field: dd_lpdata::sol"][::std::mem::offset_of!(dd_lpdata, sol) - 416usize];
    ["Offset of field: dd_lpdata::dsol"][::std::mem::offset_of!(dd_lpdata, dsol) - 424usize];
    ["Offset of field: dd_lpdata::nbindex"][::std::mem::offset_of!(dd_lpdata, nbindex) - 432usize];
    ["Offset of field: dd_lpdata::re"][::std::mem::offset_of!(dd_lpdata, re) - 440usize];
    ["Offset of field: dd_lpdata::se"][::std::mem::offset_of!(dd_lpdata, se) - 448usize];
    ["Offset of field: dd_lpdata::pivots"][::std::mem::offset_of!(dd_lpdata, pivots) - 456usize];
    ["Offset of field: dd_lpdata::total_pivots"]
        [::std::mem::offset_of!(dd_lpdata, total_pivots) - 496usize];
    ["Offset of field: dd_lpdata::use_given_basis"]
        [::std::mem::offset_of!(dd_lpdata, use_given_basis) - 504usize];
    ["Offset of field: dd_lpdata::given_nbindex"]
        [::std::mem::offset_of!(dd_lpdata, given_nbindex) - 512usize];
    ["Offset of field: dd_lpdata::starttime"]
        [::std::mem::offset_of!(dd_lpdata, starttime) - 520usize];
    ["Offset of field: dd_lpdata::endtime"][::std::mem::offset_of!(dd_lpdata, endtime) - 528usize];
};
pub type dd_LPType = dd_lpdata;
pub type dd_MatrixPtr = *mut dd_matrixdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_matrixdata {
    pub rowsize: dd_rowrange,
    pub linset: dd_rowset,
    pub colsize: dd_colrange,
    pub representation: dd_RepresentationType,
    pub numbtype: dd_NumberType,
    pub matrix: dd_Amatrix,
    pub objective: dd_LPObjectiveType,
    pub rowvec: dd_Arow,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_matrixdata"][::std::mem::size_of::<dd_matrixdata>() - 56usize];
    ["Alignment of dd_matrixdata"][::std::mem::align_of::<dd_matrixdata>() - 8usize];
    ["Offset of field: dd_matrixdata::rowsize"]
        [::std::mem::offset_of!(dd_matrixdata, rowsize) - 0usize];
    ["Offset of field: dd_matrixdata::linset"]
        [::std::mem::offset_of!(dd_matrixdata, linset) - 8usize];
    ["Offset of field: dd_matrixdata::colsize"]
        [::std::mem::offset_of!(dd_matrixdata, colsize) - 16usize];
    ["Offset of field: dd_matrixdata::representation"]
        [::std::mem::offset_of!(dd_matrixdata, representation) - 24usize];
    ["Offset of field: dd_matrixdata::numbtype"]
        [::std::mem::offset_of!(dd_matrixdata, numbtype) - 28usize];
    ["Offset of field: dd_matrixdata::matrix"]
        [::std::mem::offset_of!(dd_matrixdata, matrix) - 32usize];
    ["Offset of field: dd_matrixdata::objective"]
        [::std::mem::offset_of!(dd_matrixdata, objective) - 40usize];
    ["Offset of field: dd_matrixdata::rowvec"]
        [::std::mem::offset_of!(dd_matrixdata, rowvec) - 48usize];
};
pub type dd_MatrixType = dd_matrixdata;
pub type dd_SetFamilyPtr = *mut dd_setfamily;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_setfamily {
    pub famsize: dd_bigrange,
    pub setsize: dd_bigrange,
    pub set: dd_SetVector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_setfamily"][::std::mem::size_of::<dd_setfamily>() - 24usize];
    ["Alignment of dd_setfamily"][::std::mem::align_of::<dd_setfamily>() - 8usize];
    ["Offset of field: dd_setfamily::famsize"]
        [::std::mem::offset_of!(dd_setfamily, famsize) - 0usize];
    ["Offset of field: dd_setfamily::setsize"]
        [::std::mem::offset_of!(dd_setfamily, setsize) - 8usize];
    ["Offset of field: dd_setfamily::set"][::std::mem::offset_of!(dd_setfamily, set) - 16usize];
};
pub type dd_SetFamilyType = dd_setfamily;
pub type dd_NodePtr = *mut dd_nodedata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_nodedata {
    pub key: dd_bigrange,
    pub next: dd_NodePtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_nodedata"][::std::mem::size_of::<dd_nodedata>() - 16usize];
    ["Alignment of dd_nodedata"][::std::mem::align_of::<dd_nodedata>() - 8usize];
    ["Offset of field: dd_nodedata::key"][::std::mem::offset_of!(dd_nodedata, key) - 0usize];
    ["Offset of field: dd_nodedata::next"][::std::mem::offset_of!(dd_nodedata, next) - 8usize];
};
pub type dd_NodeType = dd_nodedata;
pub type dd_GraphPtr = *mut dd_graphdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_graphdata {
    pub vsize: dd_bigrange,
    pub adjlist: *mut dd_NodePtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_graphdata"][::std::mem::size_of::<dd_graphdata>() - 16usize];
    ["Alignment of dd_graphdata"][::std::mem::align_of::<dd_graphdata>() - 8usize];
    ["Offset of field: dd_graphdata::vsize"][::std::mem::offset_of!(dd_graphdata, vsize) - 0usize];
    ["Offset of field: dd_graphdata::adjlist"]
        [::std::mem::offset_of!(dd_graphdata, adjlist) - 8usize];
};
pub type dd_GraphType = dd_graphdata;
pub type dd_PolyhedraPtr = *mut dd_polyhedradata;
pub type dd_ConePtr = *mut dd_conedata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_polyhedradata {
    pub representation: dd_RepresentationType,
    pub homogeneous: dd_boolean,
    pub d: dd_colrange,
    pub m: dd_rowrange,
    pub A: dd_Amatrix,
    pub numbtype: dd_NumberType,
    pub child: dd_ConePtr,
    pub m_alloc: dd_rowrange,
    pub d_alloc: dd_colrange,
    pub c: dd_Arow,
    pub EqualityIndex: dd_rowflag,
    pub IsEmpty: dd_boolean,
    pub NondegAssumed: dd_boolean,
    pub InitBasisAtBottom: dd_boolean,
    pub RestrictedEnumeration: dd_boolean,
    pub RelaxedEnumeration: dd_boolean,
    pub m1: dd_rowrange,
    pub AincGenerated: dd_boolean,
    pub ldim: dd_colrange,
    pub n: dd_bigrange,
    pub Ainc: dd_Aincidence,
    pub Ared: dd_rowset,
    pub Adom: dd_rowset,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_polyhedradata"][::std::mem::size_of::<dd_polyhedradata>() - 160usize];
    ["Alignment of dd_polyhedradata"][::std::mem::align_of::<dd_polyhedradata>() - 8usize];
    ["Offset of field: dd_polyhedradata::representation"]
        [::std::mem::offset_of!(dd_polyhedradata, representation) - 0usize];
    ["Offset of field: dd_polyhedradata::homogeneous"]
        [::std::mem::offset_of!(dd_polyhedradata, homogeneous) - 4usize];
    ["Offset of field: dd_polyhedradata::d"][::std::mem::offset_of!(dd_polyhedradata, d) - 8usize];
    ["Offset of field: dd_polyhedradata::m"][::std::mem::offset_of!(dd_polyhedradata, m) - 16usize];
    ["Offset of field: dd_polyhedradata::A"][::std::mem::offset_of!(dd_polyhedradata, A) - 24usize];
    ["Offset of field: dd_polyhedradata::numbtype"]
        [::std::mem::offset_of!(dd_polyhedradata, numbtype) - 32usize];
    ["Offset of field: dd_polyhedradata::child"]
        [::std::mem::offset_of!(dd_polyhedradata, child) - 40usize];
    ["Offset of field: dd_polyhedradata::m_alloc"]
        [::std::mem::offset_of!(dd_polyhedradata, m_alloc) - 48usize];
    ["Offset of field: dd_polyhedradata::d_alloc"]
        [::std::mem::offset_of!(dd_polyhedradata, d_alloc) - 56usize];
    ["Offset of field: dd_polyhedradata::c"][::std::mem::offset_of!(dd_polyhedradata, c) - 64usize];
    ["Offset of field: dd_polyhedradata::EqualityIndex"]
        [::std::mem::offset_of!(dd_polyhedradata, EqualityIndex) - 72usize];
    ["Offset of field: dd_polyhedradata::IsEmpty"]
        [::std::mem::offset_of!(dd_polyhedradata, IsEmpty) - 80usize];
    ["Offset of field: dd_polyhedradata::NondegAssumed"]
        [::std::mem::offset_of!(dd_polyhedradata, NondegAssumed) - 84usize];
    ["Offset of field: dd_polyhedradata::InitBasisAtBottom"]
        [::std::mem::offset_of!(dd_polyhedradata, InitBasisAtBottom) - 88usize];
    ["Offset of field: dd_polyhedradata::RestrictedEnumeration"]
        [::std::mem::offset_of!(dd_polyhedradata, RestrictedEnumeration) - 92usize];
    ["Offset of field: dd_polyhedradata::RelaxedEnumeration"]
        [::std::mem::offset_of!(dd_polyhedradata, RelaxedEnumeration) - 96usize];
    ["Offset of field: dd_polyhedradata::m1"]
        [::std::mem::offset_of!(dd_polyhedradata, m1) - 104usize];
    ["Offset of field: dd_polyhedradata::AincGenerated"]
        [::std::mem::offset_of!(dd_polyhedradata, AincGenerated) - 112usize];
    ["Offset of field: dd_polyhedradata::ldim"]
        [::std::mem::offset_of!(dd_polyhedradata, ldim) - 120usize];
    ["Offset of field: dd_polyhedradata::n"]
        [::std::mem::offset_of!(dd_polyhedradata, n) - 128usize];
    ["Offset of field: dd_polyhedradata::Ainc"]
        [::std::mem::offset_of!(dd_polyhedradata, Ainc) - 136usize];
    ["Offset of field: dd_polyhedradata::Ared"]
        [::std::mem::offset_of!(dd_polyhedradata, Ared) - 144usize];
    ["Offset of field: dd_polyhedradata::Adom"]
        [::std::mem::offset_of!(dd_polyhedradata, Adom) - 152usize];
};
pub type dd_PolyhedraType = dd_polyhedradata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dd_conedata {
    pub representation: dd_RepresentationType,
    pub m: dd_rowrange,
    pub d: dd_colrange,
    pub A: dd_Amatrix,
    pub numbtype: dd_NumberType,
    pub parent: dd_PolyhedraPtr,
    pub m_alloc: dd_rowrange,
    pub d_alloc: dd_colrange,
    pub Iteration: dd_rowrange,
    pub HalfspaceOrder: dd_RowOrderType,
    pub FirstRay: dd_RayPtr,
    pub LastRay: dd_RayPtr,
    pub ArtificialRay: dd_RayPtr,
    pub PosHead: dd_RayPtr,
    pub ZeroHead: dd_RayPtr,
    pub NegHead: dd_RayPtr,
    pub PosLast: dd_RayPtr,
    pub ZeroLast: dd_RayPtr,
    pub NegLast: dd_RayPtr,
    pub Edges: *mut *mut dd_AdjacencyType,
    pub rseed: ::std::os::raw::c_uint,
    pub ColReduced: dd_boolean,
    pub LinearityDim: dd_bigrange,
    pub d_orig: dd_colrange,
    pub newcol: dd_colindex,
    pub InitialRayIndex: dd_colindex,
    pub OrderVector: dd_rowindex,
    pub RecomputeRowOrder: dd_boolean,
    pub PreOrderedRun: dd_boolean,
    pub GroundSet: dd_rowset,
    pub EqualitySet: dd_rowset,
    pub NonequalitySet: dd_rowset,
    pub AddedHalfspaces: dd_rowset,
    pub WeaklyAddedHalfspaces: dd_rowset,
    pub InitialHalfspaces: dd_rowset,
    pub RayCount: ::std::os::raw::c_long,
    pub FeasibleRayCount: ::std::os::raw::c_long,
    pub WeaklyFeasibleRayCount: ::std::os::raw::c_long,
    pub TotalRayCount: ::std::os::raw::c_long,
    pub ZeroRayCount: ::std::os::raw::c_long,
    pub EdgeCount: ::std::os::raw::c_long,
    pub TotalEdgeCount: ::std::os::raw::c_long,
    pub count_int: ::std::os::raw::c_long,
    pub count_int_good: ::std::os::raw::c_long,
    pub count_int_bad: ::std::os::raw::c_long,
    pub B: dd_Bmatrix,
    pub Bsave: dd_Bmatrix,
    pub Error: dd_ErrorType,
    pub CompStatus: dd_CompStatusType,
    pub starttime: time_t,
    pub endtime: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dd_conedata"][::std::mem::size_of::<dd_conedata>() - 384usize];
    ["Alignment of dd_conedata"][::std::mem::align_of::<dd_conedata>() - 8usize];
    ["Offset of field: dd_conedata::representation"]
        [::std::mem::offset_of!(dd_conedata, representation) - 0usize];
    ["Offset of field: dd_conedata::m"][::std::mem::offset_of!(dd_conedata, m) - 8usize];
    ["Offset of field: dd_conedata::d"][::std::mem::offset_of!(dd_conedata, d) - 16usize];
    ["Offset of field: dd_conedata::A"][::std::mem::offset_of!(dd_conedata, A) - 24usize];
    ["Offset of field: dd_conedata::numbtype"]
        [::std::mem::offset_of!(dd_conedata, numbtype) - 32usize];
    ["Offset of field: dd_conedata::parent"][::std::mem::offset_of!(dd_conedata, parent) - 40usize];
    ["Offset of field: dd_conedata::m_alloc"]
        [::std::mem::offset_of!(dd_conedata, m_alloc) - 48usize];
    ["Offset of field: dd_conedata::d_alloc"]
        [::std::mem::offset_of!(dd_conedata, d_alloc) - 56usize];
    ["Offset of field: dd_conedata::Iteration"]
        [::std::mem::offset_of!(dd_conedata, Iteration) - 64usize];
    ["Offset of field: dd_conedata::HalfspaceOrder"]
        [::std::mem::offset_of!(dd_conedata, HalfspaceOrder) - 72usize];
    ["Offset of field: dd_conedata::FirstRay"]
        [::std::mem::offset_of!(dd_conedata, FirstRay) - 80usize];
    ["Offset of field: dd_conedata::LastRay"]
        [::std::mem::offset_of!(dd_conedata, LastRay) - 88usize];
    ["Offset of field: dd_conedata::ArtificialRay"]
        [::std::mem::offset_of!(dd_conedata, ArtificialRay) - 96usize];
    ["Offset of field: dd_conedata::PosHead"]
        [::std::mem::offset_of!(dd_conedata, PosHead) - 104usize];
    ["Offset of field: dd_conedata::ZeroHead"]
        [::std::mem::offset_of!(dd_conedata, ZeroHead) - 112usize];
    ["Offset of field: dd_conedata::NegHead"]
        [::std::mem::offset_of!(dd_conedata, NegHead) - 120usize];
    ["Offset of field: dd_conedata::PosLast"]
        [::std::mem::offset_of!(dd_conedata, PosLast) - 128usize];
    ["Offset of field: dd_conedata::ZeroLast"]
        [::std::mem::offset_of!(dd_conedata, ZeroLast) - 136usize];
    ["Offset of field: dd_conedata::NegLast"]
        [::std::mem::offset_of!(dd_conedata, NegLast) - 144usize];
    ["Offset of field: dd_conedata::Edges"][::std::mem::offset_of!(dd_conedata, Edges) - 152usize];
    ["Offset of field: dd_conedata::rseed"][::std::mem::offset_of!(dd_conedata, rseed) - 160usize];
    ["Offset of field: dd_conedata::ColReduced"]
        [::std::mem::offset_of!(dd_conedata, ColReduced) - 164usize];
    ["Offset of field: dd_conedata::LinearityDim"]
        [::std::mem::offset_of!(dd_conedata, LinearityDim) - 168usize];
    ["Offset of field: dd_conedata::d_orig"]
        [::std::mem::offset_of!(dd_conedata, d_orig) - 176usize];
    ["Offset of field: dd_conedata::newcol"]
        [::std::mem::offset_of!(dd_conedata, newcol) - 184usize];
    ["Offset of field: dd_conedata::InitialRayIndex"]
        [::std::mem::offset_of!(dd_conedata, InitialRayIndex) - 192usize];
    ["Offset of field: dd_conedata::OrderVector"]
        [::std::mem::offset_of!(dd_conedata, OrderVector) - 200usize];
    ["Offset of field: dd_conedata::RecomputeRowOrder"]
        [::std::mem::offset_of!(dd_conedata, RecomputeRowOrder) - 208usize];
    ["Offset of field: dd_conedata::PreOrderedRun"]
        [::std::mem::offset_of!(dd_conedata, PreOrderedRun) - 212usize];
    ["Offset of field: dd_conedata::GroundSet"]
        [::std::mem::offset_of!(dd_conedata, GroundSet) - 216usize];
    ["Offset of field: dd_conedata::EqualitySet"]
        [::std::mem::offset_of!(dd_conedata, EqualitySet) - 224usize];
    ["Offset of field: dd_conedata::NonequalitySet"]
        [::std::mem::offset_of!(dd_conedata, NonequalitySet) - 232usize];
    ["Offset of field: dd_conedata::AddedHalfspaces"]
        [::std::mem::offset_of!(dd_conedata, AddedHalfspaces) - 240usize];
    ["Offset of field: dd_conedata::WeaklyAddedHalfspaces"]
        [::std::mem::offset_of!(dd_conedata, WeaklyAddedHalfspaces) - 248usize];
    ["Offset of field: dd_conedata::InitialHalfspaces"]
        [::std::mem::offset_of!(dd_conedata, InitialHalfspaces) - 256usize];
    ["Offset of field: dd_conedata::RayCount"]
        [::std::mem::offset_of!(dd_conedata, RayCount) - 264usize];
    ["Offset of field: dd_conedata::FeasibleRayCount"]
        [::std::mem::offset_of!(dd_conedata, FeasibleRayCount) - 272usize];
    ["Offset of field: dd_conedata::WeaklyFeasibleRayCount"]
        [::std::mem::offset_of!(dd_conedata, WeaklyFeasibleRayCount) - 280usize];
    ["Offset of field: dd_conedata::TotalRayCount"]
        [::std::mem::offset_of!(dd_conedata, TotalRayCount) - 288usize];
    ["Offset of field: dd_conedata::ZeroRayCount"]
        [::std::mem::offset_of!(dd_conedata, ZeroRayCount) - 296usize];
    ["Offset of field: dd_conedata::EdgeCount"]
        [::std::mem::offset_of!(dd_conedata, EdgeCount) - 304usize];
    ["Offset of field: dd_conedata::TotalEdgeCount"]
        [::std::mem::offset_of!(dd_conedata, TotalEdgeCount) - 312usize];
    ["Offset of field: dd_conedata::count_int"]
        [::std::mem::offset_of!(dd_conedata, count_int) - 320usize];
    ["Offset of field: dd_conedata::count_int_good"]
        [::std::mem::offset_of!(dd_conedata, count_int_good) - 328usize];
    ["Offset of field: dd_conedata::count_int_bad"]
        [::std::mem::offset_of!(dd_conedata, count_int_bad) - 336usize];
    ["Offset of field: dd_conedata::B"][::std::mem::offset_of!(dd_conedata, B) - 344usize];
    ["Offset of field: dd_conedata::Bsave"][::std::mem::offset_of!(dd_conedata, Bsave) - 352usize];
    ["Offset of field: dd_conedata::Error"][::std::mem::offset_of!(dd_conedata, Error) - 360usize];
    ["Offset of field: dd_conedata::CompStatus"]
        [::std::mem::offset_of!(dd_conedata, CompStatus) - 364usize];
    ["Offset of field: dd_conedata::starttime"]
        [::std::mem::offset_of!(dd_conedata, starttime) - 368usize];
    ["Offset of field: dd_conedata::endtime"]
        [::std::mem::offset_of!(dd_conedata, endtime) - 376usize];
};
pub type dd_ConeType = dd_conedata;
unsafe extern "C" {
    pub static mut dd_debug: dd_boolean;
}
unsafe extern "C" {
    pub static mut dd_log: dd_boolean;
}
unsafe extern "C" {
    pub static mut dd_zero: mytype;
}
unsafe extern "C" {
    pub static mut dd_one: mytype;
}
unsafe extern "C" {
    pub static mut dd_purezero: mytype;
}
unsafe extern "C" {
    pub static mut dd_minuszero: mytype;
}
unsafe extern "C" {
    pub static mut dd_minusone: mytype;
}
unsafe extern "C" {
    pub static mut dd_statStartTime: time_t;
}
unsafe extern "C" {
    pub static mut dd_statBApivots: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut dd_statCCpivots: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut dd_statDS1pivots: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut dd_statDS2pivots: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut dd_statACpivots: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut dd_choiceLPSolverDefault: dd_LPSolverType;
}
unsafe extern "C" {
    pub static mut dd_choiceRedcheckAlgorithm: dd_LPSolverType;
}
unsafe extern "C" {
    pub static mut dd_choiceLexicoPivotQ: dd_boolean;
}
unsafe extern "C" {
    pub fn dd_InitializeArow(arg1: dd_colrange, arg2: *mut dd_Arow);
}
unsafe extern "C" {
    pub fn dd_InitializeAmatrix(arg1: dd_rowrange, arg2: dd_colrange, arg3: *mut dd_Amatrix);
}
unsafe extern "C" {
    pub fn dd_InitializeBmatrix(arg1: dd_colrange, arg2: *mut dd_Bmatrix);
}
unsafe extern "C" {
    pub fn dd_CreateSetFamily(arg1: dd_bigrange, arg2: dd_bigrange) -> dd_SetFamilyPtr;
}
unsafe extern "C" {
    pub fn dd_FreeSetFamily(arg1: dd_SetFamilyPtr);
}
unsafe extern "C" {
    pub fn dd_CreateMatrix(arg1: dd_rowrange, arg2: dd_colrange) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_FreeAmatrix(arg1: dd_rowrange, arg2: dd_colrange, arg3: dd_Amatrix);
}
unsafe extern "C" {
    pub fn dd_FreeArow(arg1: dd_colrange, arg2: dd_Arow);
}
unsafe extern "C" {
    pub fn dd_FreeBmatrix(arg1: dd_colrange, arg2: dd_Bmatrix);
}
unsafe extern "C" {
    pub fn dd_FreeDDMemory(arg1: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_FreePolyhedra(arg1: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_FreeMatrix(arg1: dd_MatrixPtr);
}
unsafe extern "C" {
    pub fn dd_SetToIdentity(arg1: dd_colrange, arg2: dd_Bmatrix);
}
unsafe extern "C" {
    pub fn dd_Nonnegative(arg1: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Nonpositive(arg1: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Positive(arg1: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Negative(arg1: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_EqualToZero(arg1: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Nonzero(arg1: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Equal(arg1: *mut f64, arg2: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Larger(arg1: *mut f64, arg2: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Smaller(arg1: *mut f64, arg2: *mut f64) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_abs(arg1: *mut f64, arg2: *mut f64);
}
unsafe extern "C" {
    pub fn dd_LinearComb(
        arg1: *mut f64,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
    );
}
unsafe extern "C" {
    pub fn dd_InnerProduct(arg1: *mut f64, arg2: dd_colrange, arg3: dd_Arow, arg4: dd_Arow);
}
unsafe extern "C" {
    pub fn dd_CopyInput(arg1: dd_PolyhedraPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_CopyOutput(arg1: dd_PolyhedraPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_CopyInequalities(arg1: dd_PolyhedraPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_CopyGenerators(arg1: dd_PolyhedraPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_CopyIncidence(arg1: dd_PolyhedraPtr) -> dd_SetFamilyPtr;
}
unsafe extern "C" {
    pub fn dd_CopyAdjacency(arg1: dd_PolyhedraPtr) -> dd_SetFamilyPtr;
}
unsafe extern "C" {
    pub fn dd_CopyInputIncidence(arg1: dd_PolyhedraPtr) -> dd_SetFamilyPtr;
}
unsafe extern "C" {
    pub fn dd_CopyInputAdjacency(arg1: dd_PolyhedraPtr) -> dd_SetFamilyPtr;
}
unsafe extern "C" {
    pub fn dd_DDFile2File(
        ifile: *mut ::std::os::raw::c_char,
        ofile: *mut ::std::os::raw::c_char,
        err: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_DDInputAppend(
        arg1: *mut dd_PolyhedraPtr,
        arg2: dd_MatrixPtr,
        arg3: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_PolyFile2Matrix(f: *mut FILE, arg1: *mut dd_ErrorType) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_DDMatrix2Poly(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_PolyhedraPtr;
}
unsafe extern "C" {
    pub fn dd_DDMatrix2Poly2(
        arg1: dd_MatrixPtr,
        arg2: dd_RowOrderType,
        arg3: *mut dd_ErrorType,
    ) -> dd_PolyhedraPtr;
}
unsafe extern "C" {
    pub fn dd_Redundant(
        arg1: dd_MatrixPtr,
        arg2: dd_rowrange,
        arg3: dd_Arow,
        arg4: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_RedundantRows(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_rowset;
}
unsafe extern "C" {
    pub fn dd_SRedundant(
        arg1: dd_MatrixPtr,
        arg2: dd_rowrange,
        arg3: dd_Arow,
        arg4: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_SRedundantRows(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_rowset;
}
unsafe extern "C" {
    pub fn dd_RedundantRowsViaShooting(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_rowset;
}
unsafe extern "C" {
    pub fn dd_RayShooting(arg1: dd_MatrixPtr, intpt: dd_Arow, direction: dd_Arow) -> dd_rowrange;
}
unsafe extern "C" {
    pub fn dd_ImplicitLinearity(
        arg1: dd_MatrixPtr,
        arg2: dd_rowrange,
        arg3: dd_Arow,
        arg4: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_ImplicitLinearityRows(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_rowset;
}
unsafe extern "C" {
    pub fn dd_FreeOfImplicitLinearity(
        arg1: dd_MatrixPtr,
        arg2: dd_Arow,
        arg3: *mut dd_rowset,
        arg4: *mut dd_ErrorType,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_MatrixCanonicalizeLinearity(
        arg1: *mut dd_MatrixPtr,
        arg2: *mut dd_rowset,
        arg3: *mut dd_rowindex,
        arg4: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_MatrixCanonicalize(
        arg1: *mut dd_MatrixPtr,
        arg2: *mut dd_rowset,
        arg3: *mut dd_rowset,
        arg4: *mut dd_rowindex,
        arg5: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_MatrixRedundancyRemove(
        M: *mut dd_MatrixPtr,
        redset: *mut dd_rowset,
        newpos: *mut dd_rowindex,
        arg1: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_FindRelativeInterior(
        arg1: dd_MatrixPtr,
        arg2: *mut dd_rowset,
        arg3: *mut dd_rowset,
        arg4: *mut dd_LPSolutionPtr,
        arg5: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_ExistsRestrictedFace(
        arg1: dd_MatrixPtr,
        arg2: dd_rowset,
        arg3: dd_rowset,
        arg4: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_ExistsRestrictedFace2(
        arg1: dd_MatrixPtr,
        arg2: dd_rowset,
        arg3: dd_rowset,
        arg4: *mut dd_LPSolutionPtr,
        arg5: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Matrix2Adjacency(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_SetFamilyPtr;
}
unsafe extern "C" {
    pub fn dd_Matrix2WeakAdjacency(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_SetFamilyPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixRank(
        arg1: dd_MatrixPtr,
        arg2: dd_rowset,
        arg3: dd_colset,
        arg4: *mut dd_rowset,
        arg5: *mut dd_colset,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn dd_MatrixCopy(arg1: dd_MatrixPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_CopyMatrix(arg1: dd_MatrixPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixNormalizedCopy(arg1: dd_MatrixPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixNormalizedSortedCopy(
        arg1: dd_MatrixPtr,
        arg2: *mut dd_rowindex,
    ) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixUniqueCopy(arg1: dd_MatrixPtr, arg2: *mut dd_rowindex) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixNormalizedSortedUniqueCopy(
        arg1: dd_MatrixPtr,
        arg2: *mut dd_rowindex,
    ) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixSortedUniqueCopy(arg1: dd_MatrixPtr, arg2: *mut dd_rowindex) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixAppend(arg1: dd_MatrixPtr, arg2: dd_MatrixPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_AppendMatrix(arg1: dd_MatrixPtr, arg2: dd_MatrixPtr) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixAppendTo(arg1: *mut dd_MatrixPtr, arg2: dd_MatrixPtr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_Remove(arg1: *mut dd_MatrixPtr, arg2: dd_rowrange) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_MatrixSubmatrix(arg1: dd_MatrixPtr, delset: dd_rowset) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixSubmatrix2(
        arg1: dd_MatrixPtr,
        delset: dd_rowset,
        arg2: *mut dd_rowindex,
    ) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixSubmatrix2L(
        arg1: dd_MatrixPtr,
        delset: dd_rowset,
        arg2: *mut dd_rowindex,
    ) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_MatrixShiftupLinearity(
        arg1: *mut dd_MatrixPtr,
        arg2: *mut dd_rowindex,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_MatrixRowRemove(M: *mut dd_MatrixPtr, r: dd_rowrange) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_MatrixRowRemove2(
        M: *mut dd_MatrixPtr,
        r: dd_rowrange,
        arg1: *mut dd_rowindex,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_MatrixRowsRemove(M: *mut dd_MatrixPtr, delset: dd_rowset) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_MatrixRowsRemove2(
        M: *mut dd_MatrixPtr,
        delset: dd_rowset,
        arg1: *mut dd_rowindex,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_SetInputFile(
        f: *mut *mut FILE,
        inputfile: *mut ::std::os::raw::c_char,
        arg1: *mut dd_ErrorType,
    );
}
unsafe extern "C" {
    pub fn dd_SetWriteFileName(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: dd_RepresentationType,
    );
}
unsafe extern "C" {
    pub fn dd_WriteAmatrix(arg1: *mut FILE, arg2: dd_Amatrix, arg3: dd_rowrange, arg4: dd_colrange);
}
unsafe extern "C" {
    pub fn dd_WriteArow(f: *mut FILE, a: dd_Arow, arg1: dd_colrange);
}
unsafe extern "C" {
    pub fn dd_WriteBmatrix(arg1: *mut FILE, arg2: dd_colrange, T: dd_Bmatrix);
}
unsafe extern "C" {
    pub fn dd_WriteMatrix(arg1: *mut FILE, arg2: dd_MatrixPtr);
}
unsafe extern "C" {
    pub fn dd_MatrixIntegerFilter(arg1: dd_MatrixPtr);
}
unsafe extern "C" {
    pub fn dd_WriteReal(arg1: *mut FILE, arg2: *mut f64);
}
unsafe extern "C" {
    pub fn dd_WriteNumber(f: *mut FILE, x: *mut f64);
}
unsafe extern "C" {
    pub fn dd_WritePolyFile(arg1: *mut FILE, arg2: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_WriteRunningMode(arg1: *mut FILE, arg2: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_WriteErrorMessages(arg1: *mut FILE, arg2: dd_ErrorType);
}
unsafe extern "C" {
    pub fn dd_WriteSetFamily(arg1: *mut FILE, arg2: dd_SetFamilyPtr);
}
unsafe extern "C" {
    pub fn dd_WriteSetFamilyCompressed(arg1: *mut FILE, arg2: dd_SetFamilyPtr);
}
unsafe extern "C" {
    pub fn dd_WriteProgramDescription(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn dd_WriteDDTimes(arg1: *mut FILE, arg2: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_WriteTimes(arg1: *mut FILE, arg2: time_t, arg3: time_t);
}
unsafe extern "C" {
    pub fn dd_WriteIncidence(arg1: *mut FILE, arg2: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_WriteAdjacency(arg1: *mut FILE, arg2: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_WriteInputAdjacency(arg1: *mut FILE, arg2: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_WriteInputIncidence(arg1: *mut FILE, arg2: dd_PolyhedraPtr);
}
unsafe extern "C" {
    pub fn dd_Matrix2LP(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_LPPtr;
}
unsafe extern "C" {
    pub fn dd_Matrix2Feasibility(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_LPPtr;
}
unsafe extern "C" {
    pub fn dd_Matrix2Feasibility2(
        arg1: dd_MatrixPtr,
        arg2: dd_rowset,
        arg3: dd_rowset,
        arg4: *mut dd_ErrorType,
    ) -> dd_LPPtr;
}
unsafe extern "C" {
    pub fn dd_LPSolve(arg1: dd_LPPtr, arg2: dd_LPSolverType, arg3: *mut dd_ErrorType)
    -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_LPSolve0(
        arg1: dd_LPPtr,
        arg2: dd_LPSolverType,
        arg3: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_CrissCrossSolve(lp: dd_LPPtr, arg1: *mut dd_ErrorType);
}
unsafe extern "C" {
    pub fn dd_DualSimplexSolve(lp: dd_LPPtr, arg1: *mut dd_ErrorType);
}
unsafe extern "C" {
    pub fn dd_MakeLPforInteriorFinding(arg1: dd_LPPtr) -> dd_LPPtr;
}
unsafe extern "C" {
    pub fn dd_CopyLPSolution(arg1: dd_LPPtr) -> dd_LPSolutionPtr;
}
unsafe extern "C" {
    pub fn dd_WriteLP(arg1: *mut FILE, arg2: dd_LPPtr);
}
unsafe extern "C" {
    pub fn dd_CreateLPData(
        arg1: dd_LPObjectiveType,
        arg2: dd_NumberType,
        arg3: dd_rowrange,
        arg4: dd_colrange,
    ) -> dd_LPPtr;
}
unsafe extern "C" {
    pub fn dd_LPReverseRow(arg1: dd_LPPtr, arg2: dd_rowrange) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_LPReplaceRow(
        arg1: dd_LPPtr,
        arg2: dd_rowrange,
        arg3: dd_Arow,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dd_LPCopyRow(arg1: dd_LPPtr, arg2: dd_rowrange) -> dd_Arow;
}
unsafe extern "C" {
    pub fn dd_FreeLPData(arg1: dd_LPPtr);
}
unsafe extern "C" {
    pub fn dd_FreeLPSolution(arg1: dd_LPSolutionPtr);
}
unsafe extern "C" {
    pub fn dd_WriteLPResult(arg1: *mut FILE, arg2: dd_LPPtr, arg3: dd_ErrorType);
}
unsafe extern "C" {
    pub fn dd_WriteLPErrorMessages(arg1: *mut FILE, arg2: dd_ErrorType);
}
unsafe extern "C" {
    pub fn dd_WriteLPTimes(arg1: *mut FILE, arg2: dd_LPPtr);
}
unsafe extern "C" {
    pub fn dd_WriteLPStats(f: *mut FILE);
}
unsafe extern "C" {
    pub fn dd_WriteLPMode(f: *mut FILE);
}
unsafe extern "C" {
    pub fn dd_FourierElimination(arg1: dd_MatrixPtr, arg2: *mut dd_ErrorType) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_BlockElimination(
        arg1: dd_MatrixPtr,
        arg2: dd_colset,
        arg3: *mut dd_ErrorType,
    ) -> dd_MatrixPtr;
}
unsafe extern "C" {
    pub fn dd_QuickSort(
        arg1: dd_rowindex,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: dd_Amatrix,
        arg5: ::std::os::raw::c_long,
    );
}
unsafe extern "C" {
    pub fn dd_RandomPermutation(
        arg1: dd_rowindex,
        arg2: ::std::os::raw::c_long,
        seed: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn dd_UniqueRows(
        arg1: dd_rowindex,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: dd_Amatrix,
        arg5: ::std::os::raw::c_long,
        arg6: dd_rowset,
        arg7: *mut ::std::os::raw::c_long,
    );
}
unsafe extern "C" {
    pub fn dd_DoubleDescription(arg1: dd_PolyhedraPtr, arg2: *mut dd_ErrorType) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_DoubleDescription2(
        arg1: dd_PolyhedraPtr,
        arg2: dd_RowOrderType,
        arg3: *mut dd_ErrorType,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_FreeDDMemory0(arg1: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_fread_rational_value(f: *mut FILE, value: *mut f64);
}
unsafe extern "C" {
    pub fn dd_sread_rational_value(s: *const ::std::os::raw::c_char, value: *mut f64);
}
unsafe extern "C" {
    pub fn dd_AddNewHalfspace1(arg1: dd_ConePtr, arg2: dd_rowrange);
}
unsafe extern "C" {
    pub fn dd_AddNewHalfspace2(arg1: dd_ConePtr, arg2: dd_rowrange);
}
unsafe extern "C" {
    pub fn dd_AddRay(arg1: dd_ConePtr, arg2: *mut mytype);
}
unsafe extern "C" {
    pub fn dd_AddArtificialRay(arg1: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_AValue(
        arg1: *mut mytype,
        arg2: dd_colrange,
        arg3: dd_Amatrix,
        arg4: *mut mytype,
        arg5: dd_rowrange,
    );
}
unsafe extern "C" {
    pub fn dd_CheckAdjacency(
        arg1: dd_ConePtr,
        arg2: *mut dd_RayPtr,
        arg3: *mut dd_RayPtr,
        arg4: *mut dd_boolean,
    );
}
unsafe extern "C" {
    pub fn dd_CheckEquality(
        arg1: dd_colrange,
        arg2: *mut dd_RayPtr,
        arg3: *mut dd_RayPtr,
        arg4: *mut dd_boolean,
    );
}
unsafe extern "C" {
    pub fn dd_ComputeRowOrderVector(arg1: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_ConditionalAddEdge(
        arg1: dd_ConePtr,
        arg2: dd_RayPtr,
        arg3: dd_RayPtr,
        arg4: dd_RayPtr,
    );
}
unsafe extern "C" {
    pub fn dd_CopyArow(arg1: *mut mytype, arg2: *mut mytype, arg3: dd_colrange);
}
unsafe extern "C" {
    pub fn dd_CopyNormalizedAmatrix(
        arg1: *mut *mut mytype,
        arg2: *mut *mut mytype,
        arg3: dd_rowrange,
        arg4: dd_colrange,
    );
}
unsafe extern "C" {
    pub fn dd_CopyNormalizedArow(arg1: *mut mytype, arg2: *mut mytype, arg3: dd_colrange);
}
unsafe extern "C" {
    pub fn dd_CopyAmatrix(
        arg1: *mut *mut mytype,
        arg2: *mut *mut mytype,
        arg3: dd_rowrange,
        arg4: dd_colrange,
    );
}
unsafe extern "C" {
    pub fn dd_PermuteCopyAmatrix(
        arg1: *mut *mut mytype,
        arg2: *mut *mut mytype,
        arg3: dd_rowrange,
        arg4: dd_colrange,
        arg5: dd_rowindex,
    );
}
unsafe extern "C" {
    pub fn dd_PermutePartialCopyAmatrix(
        arg1: *mut *mut mytype,
        arg2: *mut *mut mytype,
        arg3: dd_rowrange,
        arg4: dd_colrange,
        arg5: dd_rowindex,
        arg6: dd_rowrange,
        arg7: dd_rowrange,
    );
}
unsafe extern "C" {
    pub fn dd_SetMatrixObjective(arg1: dd_MatrixPtr, arg2: dd_LPObjectiveType);
}
unsafe extern "C" {
    pub fn dd_SetMatrixNumberType(arg1: dd_MatrixPtr, arg2: dd_NumberType);
}
unsafe extern "C" {
    pub fn dd_SetMatrixRepresentationType(arg1: dd_MatrixPtr, arg2: dd_RepresentationType);
}
unsafe extern "C" {
    pub fn dd_CopyBmatrix(arg1: dd_colrange, T: dd_Bmatrix, TCOPY: dd_Bmatrix);
}
unsafe extern "C" {
    pub fn dd_CopyRay(
        arg1: *mut mytype,
        arg2: dd_colrange,
        arg3: dd_RayPtr,
        arg4: dd_RepresentationType,
        arg5: dd_colindex,
    );
}
unsafe extern "C" {
    pub fn dd_CreateInitialEdges(arg1: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_CreateNewRay(arg1: dd_ConePtr, arg2: dd_RayPtr, arg3: dd_RayPtr, arg4: dd_rowrange);
}
unsafe extern "C" {
    pub fn dd_Eliminate(arg1: dd_ConePtr, arg2: *mut dd_RayPtr);
}
unsafe extern "C" {
    pub fn dd_EvaluateARay1(arg1: dd_rowrange, arg2: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_EvaluateARay2(arg1: dd_rowrange, arg2: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_FeasibilityIndices(
        arg1: *mut ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_long,
        arg3: dd_rowrange,
        arg4: dd_ConePtr,
    );
}
unsafe extern "C" {
    pub fn dd_FindBasis(arg1: dd_ConePtr, rank: *mut ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn dd_FindInitialRays(arg1: dd_ConePtr, arg2: *mut dd_boolean);
}
unsafe extern "C" {
    pub fn dd_ColumnReduce(arg1: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_GaussianColumnPivot(
        arg1: dd_rowrange,
        arg2: dd_colrange,
        arg3: dd_Amatrix,
        arg4: dd_Bmatrix,
        arg5: dd_rowrange,
        arg6: dd_colrange,
    );
}
unsafe extern "C" {
    pub fn dd_LexSmaller(
        arg1: *mut mytype,
        arg2: *mut mytype,
        arg3: ::std::os::raw::c_long,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_LexLarger(
        arg1: *mut mytype,
        arg2: *mut mytype,
        arg3: ::std::os::raw::c_long,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_LexEqual(
        arg1: *mut mytype,
        arg2: *mut mytype,
        arg3: ::std::os::raw::c_long,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_Normalize(arg1: dd_colrange, arg2: *mut mytype);
}
unsafe extern "C" {
    pub fn dd_ProcessCommandLine(
        arg1: *mut FILE,
        arg2: dd_MatrixPtr,
        arg3: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn dd_SelectNextHalfspace(arg1: dd_ConePtr, arg2: dd_rowset, arg3: *mut dd_rowrange);
}
unsafe extern "C" {
    pub fn dd_SelectPivot2(
        arg1: dd_rowrange,
        arg2: dd_colrange,
        arg3: dd_Amatrix,
        arg4: dd_Bmatrix,
        arg5: dd_RowOrderType,
        arg6: dd_rowindex,
        arg7: dd_rowset,
        arg8: dd_rowrange,
        arg9: dd_rowset,
        arg10: dd_colset,
        arg11: *mut dd_rowrange,
        arg12: *mut dd_colrange,
        arg13: *mut dd_boolean,
    );
}
unsafe extern "C" {
    pub fn dd_SelectPreorderedNext(arg1: dd_ConePtr, arg2: dd_rowset, arg3: *mut dd_rowrange);
}
unsafe extern "C" {
    pub fn dd_SetInequalitySets(arg1: dd_ConePtr);
}
unsafe extern "C" {
    pub fn dd_SnapToInteger(arg1: *mut f64, arg2: *mut f64);
}
unsafe extern "C" {
    pub fn dd_StoreRay1(arg1: dd_ConePtr, arg2: *mut mytype, arg3: *mut dd_boolean);
}
unsafe extern "C" {
    pub fn dd_StoreRay2(
        arg1: dd_ConePtr,
        arg2: *mut mytype,
        arg3: *mut dd_boolean,
        arg4: *mut dd_boolean,
    );
}
unsafe extern "C" {
    pub fn dd_TableauEntry(
        arg1: *mut mytype,
        arg2: dd_rowrange,
        arg3: dd_colrange,
        arg4: dd_Amatrix,
        T: dd_Bmatrix,
        arg5: dd_rowrange,
        arg6: dd_colrange,
    );
}
unsafe extern "C" {
    pub fn dd_UpdateEdges(arg1: dd_ConePtr, arg2: dd_RayPtr, arg3: dd_RayPtr);
}
unsafe extern "C" {
    pub fn dd_UpdateRowOrderVector(arg1: dd_ConePtr, PriorityRows: dd_rowset);
}
unsafe extern "C" {
    pub fn dd_WriteRay(
        arg1: *mut FILE,
        arg2: dd_colrange,
        arg3: dd_RayPtr,
        arg4: dd_RepresentationType,
        arg5: dd_colindex,
    );
}
unsafe extern "C" {
    pub fn dd_ZeroIndexSet(
        arg1: dd_rowrange,
        arg2: dd_colrange,
        arg3: dd_Amatrix,
        arg4: *mut mytype,
        arg5: dd_rowset,
    );
}
unsafe extern "C" {
    pub fn dd_GetNumberType(arg1: *const ::std::os::raw::c_char) -> dd_NumberType;
}
unsafe extern "C" {
    pub fn dd_ConeDataLoad(arg1: dd_PolyhedraPtr) -> dd_ConePtr;
}
unsafe extern "C" {
    pub fn dd_CreatePolyhedraData(arg1: dd_rowrange, arg2: dd_colrange) -> dd_PolyhedraPtr;
}
unsafe extern "C" {
    pub fn dd_InitializeConeData(
        arg1: dd_rowrange,
        arg2: dd_colrange,
        arg3: *mut dd_ConePtr,
    ) -> dd_boolean;
}
unsafe extern "C" {
    pub fn dd_AppendMatrix2Poly(arg1: *mut dd_PolyhedraPtr, arg2: dd_MatrixPtr) -> dd_boolean;
}
