name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcdd-dev \
          libopenblas-dev \
          liblapack-dev \
          pkg-config \
          clang \
          libclang-dev \
          coinor-cbc \
          coinor-libcbc-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cddlib openblas lapack cbc

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run examples
      run: |
        cargo run --example test_general
        cargo run --example test_bindings
        cargo run --example test_cdd

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-coverage-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-coverage-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcdd-dev \
          libopenblas-dev \
          liblapack-dev \
          pkg-config \
          clang \
          libclang-dev \
          coinor-cbc \
          coinor-libcbc-dev

    # - name: Generate code coverage
    #   run: |
    #     cargo llvm-cov --all-features --workspace --json --output-path coverage.json
    #     cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    #     cargo llvm-cov report --json --output-path coverage-summary.json

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(cargo llvm-cov --all-features --workspace --summary-only | grep -oP 'lines.*?(\d+\.\d+)%' | grep -oP '\d+\.\d+')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-docs-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-docs-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcdd-dev \
          libopenblas-dev \
          liblapack-dev \
          pkg-config \
          clang \
          libclang-dev \
          coinor-cbc \
          coinor-libcbc-dev

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4

    - name: Upload artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: target/doc

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4